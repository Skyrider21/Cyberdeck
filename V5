import time
import board
import digitalio
from digitalio import DigitalInOut, Direction, Pull
import analogio
import pwmio
import rotaryio
import usb_hid
from adafruit_hid.keyboard import Keyboard
from adafruit_hid.keycode import Keycode
from adafruit_hid.consumer_control import ConsumerControl
# from adafruit_hid.consumer_control_code import ConsumerControlCode

print("---Pico Pad Keyboard---")
kbd = Keyboard(usb_hid.devices)
encoderPins = (
    board.A2, # CLK
    board.A1, # DT
    board.A0, # SW
)

LEDs = []
ledPins = (
    board.GP0,
    board.GP1,
    board.GP2,
    board.GP3,
    board.GP4,
    board.GP5,
)

numButtons = []
numberPins = (
   board.GP22,
   board.GP21,
   board.GP20,
   board.GP19,
   board.GP18, 
)
actionButtons = []
actionPins = (
    board.GP6,
    board.GP7,
    board.GP8,
    board.GP9,
    board.GP10,
    board.GP11,
    board.GP12,
    board.GP13,
    board.GP14,
    board.GP15,
    board.GP16,
    board.GP17,
    
)

keycode_leds = [
    Keycode.A, Keycode.B, Keycode.C, Keycode.D, Keycode.E, Keycode.F,
    Keycode.G, Keycode.H, Keycode.I, Keycode.J, Keycode.K, Keycode.L,
    Keycode.M, Keycode.N, Keycode.O, Keycode.P, Keycode.Q, Keycode.R,
    Keycode.S, Keycode.T, Keycode.U, Keycode.V, Keycode.W, Keycode.X,
    Keycode.Z, Keycode.Y  # y and z switched cause of calcs in encoder change
]
keycode_numbers = [Keycode.ONE, Keycode.TWO, Keycode.THREE, Keycode.FOUR, Keycode.FIVE, Keycode.SIX, Keycode.SEVEN, Keycode.EIGHT, Keycode.NINE, Keycode.ZERO,]

keycode_actionButtons = [
    [Keycode.N, Keycode.ENTER],  # n + ENTER
    [Keycode.S, Keycode.ENTER],  # s + ENTER
    [Keycode.W, Keycode.ENTER],  # w + ENTER
    [Keycode.E, Keycode.ENTER],  # e + ENTER
    [Keycode.I, Keycode.ENTER],  # i + ENTER
    [Keycode.T],                 # take
    [Keycode.D],                 # drop
    [Keycode.U]                  # use
]

def initialize_actionButtons():
    for pin in actionPins:
        b = DigitalInOut(pin)
        b.direction = Direction.INPUT
        b.pull = digitalio.Pull.DOWN
        actionButtons.append(b)

def initalize_Numbers():
    for pin in numberPins:
        n = DigitalInOut(pin)
        n.direction = Direction.INPUT
        n.pull = digitalio.Pull.DOWN
        numButtons.append(n)

def initialize_LEDs():
    """Initialize the LEDs once."""
    for pin in ledPins:
        led = DigitalInOut(pin)
        led.direction = Direction.INPUT
        LEDs.append(led)

def reset_LEDs():
    """Reset all LEDs to input mode."""
    for led in LEDs:
        if led.direction == Direction.OUTPUT:
            led.value = False 
            led.direction = Direction.INPUT

def set_LED(low, high):
    reset_LEDs()  
    LEDs[low].direction = Direction.OUTPUT
    LEDs[low].value = 0
    LEDs[high].direction = Direction.OUTPUT
    LEDs[high].value = 1

def activate_single_LED(num):
    num = int(num)
    if num == 0 or num > 26:
        print("Pick a number between 1 and 26 to activate a LED")
    else:
        
        low = 0
        high = 1
        if num != 1:
            for i in range(num -1):
                high_old = high
                high = low
                low = high_old
                
                if i % 2 != 0:
                    if high == 5:
                        low += 1
                        high = low +1
                    else:
                        high += 1
                
    #print(str(low)+ " "  + str(high))
    set_LED(low,high)



clk = digitalio.DigitalInOut(encoderPins[0]) 
dt = digitalio.DigitalInOut(encoderPins[1])
button = digitalio.DigitalInOut(encoderPins[2])
clk.direction = digitalio.Direction.INPUT
dt.direction = digitalio.Direction.INPUT
button.direction = digitalio.Direction.INPUT
clk.pull = digitalio.Pull.UP
dt.pull = digitalio.Pull.UP
button.pull = digitalio.Pull.UP

last_state_clk = clk.value
counter = 1
debounce_threshold = 2
currentLedNumber = 1
last_button_state = button.value

def encoder_change():
    global last_state_clk, counter, currentLedNumber  # Declare as global to modify these variables
    current_state_clk = clk.value

    # Check if the state has changed
    if current_state_clk != last_state_clk:
        # If CLK has changed, check the state of DT
        if dt.value != current_state_clk:
            # If DT is different from CLK, it's a clockwise turn
            if counter < 52:
                counter += 1
        else:
            # If DT is the same as CLK, it's a counter-clockwise turn
            if counter > 1:
                counter -= 1

        print(counter)
        
        if counter % 2 == 0:
            currentLedNumber = counter/2
        else:
            currentLedNumber = (counter +1)/2
          # Call this after updating the counter

    # Update the last state
    last_state_clk = current_state_clk

def press_key_inList(keyList,positon):
    kbd.press(keyList[positon])
    time.sleep(0.5)  # Short delay to simulate key press
    kbd.release(keyList[positon])
    
def check_encoder_button():
    global last_button_state
    current_button_state = button.value

    # Check for a button press (transition from high to low)
    if last_button_state and not current_button_state:
        if 1 <= currentLedNumber <= 26:
            press_key_inList(keycode_leds,int(currentLedNumber) - 1)
            
def press_key(key):
    kbd.press(key)
    kbd.release(key)
    
def check_number_button():
    if numButtons[0].value == 1 and numButtons[1].value ==1 :
        press_key_inList(keycode_numbers,0)
    elif numButtons[0].value == 1 and numButtons[2].value ==1 :
        press_key_inList(keycode_numbers,1)
    elif numButtons[1].value == 1 and numButtons[2].value ==1 :
        press_key_inList(keycode_numbers,2)
    elif numButtons[0].value == 1 and numButtons[3].value ==1 :
        press_key_inList(keycode_numbers,3)
    elif numButtons[1].value == 1 and numButtons[3].value ==1 :
        press_key_inList(keycode_numbers,4)
    elif numButtons[2].value == 1 and numButtons[3].value ==1 :
        press_key_inList(keycode_numbers,5)
    elif numButtons[0].value == 1 and numButtons[4].value ==1 :
        press_key_inList(keycode_numbers,6)
    elif numButtons[1].value == 1 and numButtons[4].value ==1 :
        press_key_inList(keycode_numbers,7)
    elif numButtons[2].value == 1 and numButtons[4].value ==1 :
        press_key_inList(keycode_numbers,8)
    elif numButtons[3].value == 1 and numButtons[4].value ==1 :
        press_key_inList(keycode_numbers,9)
        
    
    
def check_action_button():
    count = 0
    for b in actionButtons:
        if b.value == 1:
            # Press each key in the combination
            for key in keycode_actionButtons[count]:
                kbd.press(key)
            # Release each key in the combination
            for key in keycode_actionButtons[count]:
                kbd.release(key)
        count += 1
    
# SETUP
initialize_LEDs()
initalize_Numbers()

while True:
    encoder_change()
    activate_single_LED(currentLedNumber)
    check_encoder_button()
    check_number_button()
    check_action_button()
    
    time.sleep(0.01)
    # Small delay to debounce


    

